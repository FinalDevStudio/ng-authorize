!function(r){"use strict";function n(r,n,i){function t(r,n){if(r&&r.auth&&r.auth.allows){var i=r.auth.allows;o.isString(n)&&(n=[n]),o.isString(i)&&(i=[i]);for(var t=0,e=n.length;t<e;t++){var a=n[t];if(i.indexOf(a)>-1)return!0}return!1}return!0}function e(r,n){return!n||!n.length}function u(n,o){return!!t(n,o)||(e(n,o)?a.signInPath?r.path(a.signInPath):i.warn("ngAuthorize: No sign in path defined!"):a.forbiddenPath?r.path(a.forbiddenPath):i.warn("ngAuthorize: No forbidden path defined!"),!1)}var h={authorize:u,isAllowed:t,canSignIn:e};return h}function i(r){(o.isArray(r.authorizer)||o.isFunction(r.authorizer))&&(a.authorizer=r.authorizer),o.isString(r.signInPath)&&(a.signInPath=r.signInPath),o.isString(r.forbiddenPath)&&(a.forbiddenPath=r.forbiddenPath)}function t(){return u}function e(r){if(!o.isArray(a.authorizer)&&!o.isFunction(a.authorizer))throw new Error("ngAuthorize: Please set authorizer function first!");for(var n in r.routes){var i=r.routes[n];if(o.isObject(i.auth)){o.isObject(i.resolve)||(i.resolve={});var t=i.resolve.authorizer;o.isArray(t)&&o.isFunction(t)||(i.resolve.authorizer=a.authorizer)}}}var o=r.angular,a={authorizer:null,signInPath:null,forbiddenPath:null},u={configure:i,$get:["$location","$q","$log",n]};o.module("ngAuthorize",[]).provider("ngAuthorize",t).run(["$route",e])}(window);
//# sourceMappingURL=data:application/json;base64,
